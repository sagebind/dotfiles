app_launch_prefix: ""
terminal_title_flag: ""
locale: ""
close_when_open: true
theme: custom
monitor: ""
hotreload_theme: true
ignore_mouse: true
as_window: false
timeout: 0
disable_click_to_close: true
force_keyboard_focus: true
keys:
  accept_typeahead:
    - tab
  trigger_labels: lalt
  next:
    - down
  prev:
    - up
  close:
    - esc
  remove_from_history:
    - shift backspace
  resume_query:
    - ctrl r
  toggle_exact_search:
    - ctrl m
  activation_modifiers:
    keep_open: shift
    alternate: alt
events:
  on_activate: ""
  on_selection: ""
  on_exit: ""
  on_launch: ""
  on_query_change: ""
list:
  dynamic_sub: true
  keyboard_scroll_style: emacs
  max_entries: 50
  show_initial_entries: true
  single_click: true
  visibility_threshold: 20
  placeholder: No Results
search:
  argument_delimiter: "#"
  placeholder: Search...
  delay: 0
  resume_last_query: false
activation_mode:
  labels: jkl;asdf
builtins:
  applications:
    name: applications
    placeholder: Applications
    weight: 5
    prioritize_new: true
    hide_actions_with_empty_query: true
    context_aware: true
    refresh: true
    show_sub_when_single: true
    show_icon_when_single: true
    show_generic: true
    history: true
    actions:
      enabled: true
      hide_category: false
      hide_without_query: true
    blacklist:
      - regexp: DaVinci Resolve
        label: true
  xdph_picker:
    hidden: true
    weight: 5
    placeholder: Screen/Window Picker
    show_sub_when_single: true
    name: xdphpicker
    switcher_only: true
  calc:
    require_number: true
    weight: 5
    prefix: "="
    name: calc
    icon: accessories-calculator
    placeholder: Calculator
    min_chars: 4
  windows:
    weight: 5
    icon: view-restore
    name: windows
    placeholder: Windows
    show_icon_when_single: true
  clipboard:
    always_put_new_on_top: true
    exec: wl-copy
    weight: 5
    name: clipboard
    avoid_line_breaks: true
    placeholder: Clipboard
    image_height: 300
    max_entries: 10
    switcher_only: true
  commands:
    name: commands
    placeholder: Commands
    icon: utilities-terminal
    weight: 5
    switcher_only: false
  emojis:
    exec: wl-copy
    weight: 5
    name: emojis
    placeholder: Emojis
    switcher_only: false
    prefix: ":"
    history: true
    typeahead: true
    show_unqualified: false
  symbols:
    after_copy: ""
    weight: 5
    name: symbols
    placeholder: Symbols
    switcher_only: true
    history: true
    typeahead: true
  finder:
    use_fd: false
    weight: 5
    icon: file
    name: finder
    placeholder: Finder
    switcher_only: true
    ignore_gitignore: true
    refresh: true
    concurrency: 8
    show_icon_when_single: true
    preview_images: false
  runner:
    eager_loading: true
    weight: 1
    icon: utilities-terminal
    name: runner
    placeholder: Runner
    typeahead: true
    history: true
    generic_entry: false
    refresh: true
    use_fd: false
  ssh:
    weight: 5
    icon: preferences-system-network
    name: ssh
    placeholder: SSH
    switcher_only: true
    history: true
    refresh: true
  switcher:
    weight: 5
    name: switcher
    placeholder: Switcher
    prefix: /
  dmenu:
    hidden: true
    weight: 5
    name: dmenu
    placeholder: Dmenu
    switcher_only: true

# Here is where most of the custom goodies are.
plugins:
  - name: hyprland
    placeholder: Hyprland
    weight: 50
    entries:
      - label: Reload
        icon: hyprland
        exec: ~/.config/hypr/scripts/reload.sh
  - name: kill
    prefix: "k "
    src_once: "ps -u $USER -o comm= | sort -u"
    cmd: "pkill -f %RESULT%"
  - name: power
    placeholder: Power
    weight: 20
    keep_sort: false
    recalculate_score: true
    show_icon_when_single: true
    entries:
      - label: Log Out
        icon: system-shutdown
        exec: hyprctl dispatch exit
        searchable: logoff logout log out
      - label: Suspend
        icon: system-shutdown
        exec: systemctl suspend
        searchable: suspend
        searchable2: sleep
      - label: Shutdown
        icon: system-shutdown
        exec: shutdown now
      - label: Reboot
        icon: system-reboot
        exec: reboot
      - label: Lock Screen
        icon: system-lock-screen
        exec: playerctl --all-players pause & hyprlock
  - name: code
    prefix: "code "
    weight: 10
    src_once: >-
      locate '/data/src/*/.git' | sed 's/\/.git$//'
    cmd: >-
      code %RESULT%
  - name: organize
    placeholder: Organize
    weight: 10
    entries:
      - label: Simulate
        exec: >-
          ghostty -e "organize sim; read -p 'Press enter to close.'"
      - label: Run
        exec: >-
          ghostty -e "organize run; read -p 'Press enter to close.'"
  - name: resolve
    placeholder: DaVinci Resolve
    weight: 6
    entries:
      - label: DaVinci Resolve
        icon: /opt/resolve/graphics/DV_Resolve.png
        exec: hyprctl dispatch exec ~/.config/hypr/scripts/resolve.sh

  # Searches for Firefox toolbar bookmarks by page title and URL. Only the top 10
  # ordered by Firefox's "frecency" are returned at a time, then Walker re-sorts
  # by distance to search term.
  - name: firefox_bookmarks
    placeholder: Firefox Bookmarks
    weight: 10
    delay: 1000
    keep_sort: true
    parser: json
    src: >-
      FIREFOX_DIR=$HOME/.mozilla/firefox
      PROFILE_ID=$(sed -n 's/^Default=//p' $FIREFOX_DIR/installs.ini)
      BOOKMARKS_FILE="$FIREFOX_DIR/$PROFILE_ID/places.sqlite"

      SQL="
        WITH RECURSIVE bookmarks_tree(bookmark_id, root_id) AS (
          SELECT id AS bookmark_id, id AS root_id
          FROM moz_bookmarks
          WHERE parent = 1
          UNION ALL
          SELECT b.id AS bookmark_id, tree.root_id
          FROM moz_bookmarks b
          JOIN bookmarks_tree tree ON b.parent = tree.bookmark_id
        )
        SELECT bookmark.title, place.url, place.preview_image_url, place.frecency
        FROM bookmarks_tree tree
        JOIN moz_bookmarks bookmark ON bookmark.id = tree.bookmark_id
        JOIN moz_bookmarks root ON root.id = tree.root_id
        JOIN moz_places place ON place.id = bookmark.fk
        WHERE tree.bookmark_id != tree.root_id
          AND (bookmark.title LIKE '%%TERM%%' OR place.url LIKE '%%TERM%%')
          AND root.title = 'toolbar'
        ORDER BY place.frecency DESC
        LIMIT 10
      "

      sqlite3 -json "file:${BOOKMARKS_FILE}?immutable=1" "$SQL" | jq 'map({
        label: .title,
        exec: ("xdg-open " + .url),
        sub: .url,
        searchable: .title,
        searchable2: .url
      })'

  # Offers to open a web search using Kagi, but also returns search term
  # suggestions.
  - name: kagi
    placeholder: Kagi Search
    weight: 1
    delay: 2000 # don't spam kagi too much
    parser: json
    src: >-
      curl -s --get --data-urlencode 'q=%TERM%' https://kagi.com/api/autosuggest | jq -r '[.[0]] + .[1] | unique | map({
        label: .,
        icon: "'$HOME'/.local/share/albert/python/plugins/kagi/kagi.svg",
        sub: (@uri "https://kagi.com/search?q=\(.)"),
        exec: (@sh "xdg-open \(@uri "https://kagi.com/search?q=\(.)")"),
        exec_alt: (@sh "xdg-open \(@uri "https://kagi.com/assistant?q=\(.)")")
      })'
